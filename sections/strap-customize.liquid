<div class="section--starp-customization">
    <div class="page-width">
        <div class="starp-customization">
            <div class="starp-content">
                <div class="header-section">
                    {% if section.settings.heading != blank %}<div class="heading">{{ section.settings.heading }}</div>{% endif %}
                    {% if section.settings.desc != blank %}<div class="desc">{{ section.settings.desc }}</div>{% endif %}
                </div>
                {% if section.settings.watch_title %}
                    <div class="watch__content">
                        <div class="title">{{ section.settings.watch_title }}</div>
                        <div class="text">{{ section.settings.watch_text }}</div>
                        <div class="strapenginescreen">
                            <div class="strapengine__collection"></div>
                        </div>
                    </div>
                {% endif %}
                {% if section.settings.strap_title %}
                    <div class="strap__content">
                        <div class="title">{{ section.settings.strap_title }}</div>
                        <div class="text">{{ section.settings.strap_text }}</div>
                        <div class="strapengine__strap"></div>
                    </div>
                {% endif %}
                <div class="strap-add-to-cart">
                    {% assign product = all_products["orange-silicone-strap-24mm-silver-buckle"] %}
                    {%- assign product_form_id = 'product-form-' | append: section.id -%}
                    {%- form 'product',
                        product,
                        id: product_form_id,
                        class: 'form',
                        novalidate: 'novalidate',
                        data-type: 'add-to-cart-form'
                    -%}
                        <input
                            type="hidden"
                            name="id"
                            value="{{ product.selected_or_first_available_variant.id }}"
                            class="product-variant-id"
                        >
                        <button type="submit" name="add" class="product-form__submit button button--full-width button--primary" disabled="">
                            ADD STRAP TO CART
                        </button>
                    {%- endform -%}
                </div>
            </div>
            <div class="starp-img">
                <div class="starp-img-inner">
                    <div class="model-img"></div>
                    <div class="strap__image"><img src="{{ section.settings.strap_img | img_url: 'master' }}" height="100%" width="100%"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // STRAP ENGINE OBJECT
    const strapEngine = (function(){

        const params = {
            data : null,
            jsonRowData: null,
            jsonData: [],
            selectedCollection: '',
            selectedModel: '',
        }

        const int = () => {
            
            console.log('strap init');

            // add output contianer
            {% comment %} document.body.insertAdjacentHTML('beforeend', '<div class="strapenginescreen"><div class="strapengine"></div></div>'); {% endcomment %}
           
            readData();
        }

        const readData = () => {

            const sheetUrl = 'https://docs.google.com/spreadsheets/d/1-x59uEuFZVtK-tZoUSn4koPptZ2YAiFmLeskw9eA4E4/pub?gid=0&single=true&output=csv';

        
            fetch(sheetUrl)
                .then(response => response.text())
                .then(csv => {
                    // Convert CSV to JSON
                    const json = csvToJson(csv);

                    params.data = csv;
                    params.jsonRowData = json;
                    params.jsonData = groupByIdentifier(params.jsonRowData);

                    console.log(params.jsonData, "json file===============");

                    //console.log(params.jsonData);

                    buildFirstSelect();
                    buildSecondSelect();
                    buildThirdSelect();

                })
                .catch(error => console.error('Error fetching data:', error));

        }

        // build collection select (1st)
        const buildFirstSelect = () => {
            // Create the custom dropdown container
            const dropdownContainer = document.createElement('div');
            dropdownContainer.className = 'custom-dropdown select-collection';

            // Create the button
            const dropdownBtn = document.createElement('button');
            dropdownBtn.className = 'dropdown-btn';
            dropdownBtn.innerHTML = '<span>SELECT COLLECTION</span>';

            // Create the SVG element
            const svgNamespace = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNamespace, "svg");

            // Set attributes for the SVG element
            svg.setAttribute("fill", "#000000");
            svg.setAttribute("version", "1.1");
            svg.setAttribute("id", "Layer_1");
            svg.setAttribute("xmlns", svgNamespace);
            svg.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
            svg.setAttribute("width", "20px");
            svg.setAttribute("height", "20px");
            svg.setAttribute("viewBox", "0 0 100 100");
            svg.setAttribute("enable-background", "new 0 0 100 100");
            svg.setAttribute("xml:space", "preserve");

            // Create the <g> element
            const g = document.createElementNS(svgNamespace, "g");

            // Create the <path> element
            const path = document.createElementNS(svgNamespace, "path");
            path.setAttribute("d", "M78.466,35.559L50.15,63.633L22.078,35.317c-0.777-0.785-2.044-0.789-2.828-0.012s-0.789,2.044-0.012,2.827L48.432,67.58 c0.365,0.368,0.835,0.563,1.312,0.589c0.139,0.008,0.278-0.001,0.415-0.021c0.054,0.008,0.106,0.021,0.16,0.022 c0.544,0.029,1.099-0.162,1.515-0.576l29.447-29.196c0.785-0.777,0.79-2.043,0.012-2.828S79.249,34.781,78.466,35.559z");

            // Append the <path> to the <g>
            g.appendChild(path);

            // Append the <g> to the SVG
            svg.appendChild(g);

            // Create the dropdown content container
            const dropdownContent = document.createElement('div');
            dropdownContent.className = 'dropdown-content';

            // Append the button and content to the container
            dropdownContainer.appendChild(dropdownBtn);
            dropdownBtn.appendChild(svg);
            dropdownContainer.appendChild(dropdownContent);

            for (let identifier in params.jsonData){
                let colOption = document.createElement('div');
                colOption.className = 'dropdown-item';
                colOption.setAttribute('value', params.jsonData[identifier].Identifier);
                colOption.textContent = params.jsonData[identifier].Collection;

                dropdownContent.appendChild(colOption);
            }

            document.querySelectorAll('.strapengine__collection')[0].appendChild(wrapInDiv(dropdownContainer));
            params.selectedCollection = '';

            dropdownContainer.querySelectorAll('.dropdown-item').forEach(item => {
                item.addEventListener('click', function() {
                    const collection = this.getAttribute('value');
                    console.log(collection, "collection===========");
                    params.selectedCollection = collection;
                    document.querySelectorAll('.custom-dropdown.select-modal').forEach(element => element.remove()); // remove model select and rebuild
                    document.querySelectorAll('.custom-dropdown.select-strap').forEach(element => element.remove());  // remove strap select and rebuild
                    buildSecondSelect();    
                    buildThirdSelect();
                });
            });

            // Initialize all dropdowns
            buildDropdownCollection();
            buildDropdownModel();
        }

        // build model select (2nd)
        const buildSecondSelect = () => {
            console.log(params.selectedCollection, "selected collection=============================");
            // Create the custom dropdown container
            const dropdownContainer = document.createElement('div');
            dropdownContainer.className = 'custom-dropdown select-modal';

            // Create the button
            const dropdownBtn = document.createElement('button');
            dropdownBtn.className = 'dropdown-btn';
            dropdownBtn.innerHTML = '<span>SELECT MODEL</span>';

            // Create the SVG element
            const svgNamespace = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNamespace, "svg");

            // Set attributes for the SVG element
            svg.setAttribute("fill", "#000000");
            svg.setAttribute("version", "1.1");
            svg.setAttribute("id", "Layer_1");
            svg.setAttribute("xmlns", svgNamespace);
            svg.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
            svg.setAttribute("width", "20px");
            svg.setAttribute("height", "20px");
            svg.setAttribute("viewBox", "0 0 100 100");
            svg.setAttribute("enable-background", "new 0 0 100 100");
            svg.setAttribute("xml:space", "preserve");

            // Create the <g> element
            const g = document.createElementNS(svgNamespace, "g");

            // Create the <path> element
            const path = document.createElementNS(svgNamespace, "path");
            path.setAttribute("d", "M78.466,35.559L50.15,63.633L22.078,35.317c-0.777-0.785-2.044-0.789-2.828-0.012s-0.789,2.044-0.012,2.827L48.432,67.58 c0.365,0.368,0.835,0.563,1.312,0.589c0.139,0.008,0.278-0.001,0.415-0.021c0.054,0.008,0.106,0.021,0.16,0.022 c0.544,0.029,1.099-0.162,1.515-0.576l29.447-29.196c0.785-0.777,0.79-2.043,0.012-2.828S79.249,34.781,78.466,35.559z");

            // Append the <path> to the <g>
            g.appendChild(path);

            // Append the <g> to the SVG
            svg.appendChild(g);

            // Create the dropdown content container
            const dropdownContent = document.createElement('div');
            dropdownContent.className = 'dropdown-content';

            // Append the button and content to the container
            dropdownContainer.appendChild(dropdownBtn);
            dropdownBtn.appendChild(svg);
            dropdownContainer.appendChild(dropdownContent);

            // const colSelect = document.createElement('select');
            if (
                params.jsonData &&
                params.selectedCollection in params.jsonData &&
                params.jsonData[params.selectedCollection].Models
            ) {
                const models = params.jsonData[params.selectedCollection].Models;

                for (let identifier in models){
                    let name = models[identifier]['Model Name'];
                    let modelImage = models[identifier]['Image'];
    
                    let colOption = document.createElement('div');
                    colOption.className = 'dropdown-item';
                    colOption.setAttribute('value', name);
                    colOption.textContent = name;
    
                    dropdownContent.appendChild(colOption);
    
                    console.log(modelImage, "modelImage==============");
                    // create image tag 
                    if (modelImage && modelImage !== '') {
                        const img = document.createElement('img');
                        img.src = modelImage;
    
                        colOption.setAttribute('data-image', modelImage);
                        colOption.appendChild(img);
                    }
                }
            // Your code logic using models
            } else {
                console.error('The selected collection or Models property does not exist.');
            }

            document.querySelectorAll('.strapengine__collection')[0].appendChild(wrapInDiv(dropdownContainer));
            params.selectedModel = '';

            dropdownContainer.querySelectorAll('.dropdown-item').forEach(item => {
                item.addEventListener('click', function() {
                    const modal = this.getAttribute('value');
                    params.selectedModel = modal;
                    const getModalImage = this.getAttribute('data-image');
                    if (getModalImage !== null && getModalImage.trim() !== '') {
                        document.querySelector('.starp-img-inner .strap__image img').classList.add("remove");
                        document.querySelector('.starp-img-inner .model-img').innerHTML = '';
                        document.querySelector('.starp-img-inner .model-img').innerHTML = `<img src="${getModalImage}">`;
                    }
                    document.querySelectorAll('.custom-dropdown.select-strap').forEach(element => element.remove());  // remove strap select and rebuild
                    buildThirdSelect();
                });
            });

            // Initialize all dropdowns
            buildDropdownModel();
        }

        // build strap select (3rd)
        const buildThirdSelect = () => {
            console.log(params.selectedModel, "selected model=============================");
            // Create the custom dropdown container
            const dropdownContainer = document.createElement('div');
            dropdownContainer.className = 'custom-dropdown select-strap';

            // Create the button
            const dropdownBtn = document.createElement('button');
            dropdownBtn.className = 'dropdown-btn';
            dropdownBtn.innerHTML = '<span>SELECT STRAP</span>';

            // Create the SVG element
            const svgNamespace = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNamespace, "svg");

            // Set attributes for the SVG element
            svg.setAttribute("fill", "#000000");
            svg.setAttribute("version", "1.1");
            svg.setAttribute("id", "Layer_1");
            svg.setAttribute("xmlns", svgNamespace);
            svg.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
            svg.setAttribute("width", "20px");
            svg.setAttribute("height", "20px");
            svg.setAttribute("viewBox", "0 0 100 100");
            svg.setAttribute("enable-background", "new 0 0 100 100");
            svg.setAttribute("xml:space", "preserve");

            // Create the <g> element
            const g = document.createElementNS(svgNamespace, "g");

            // Create the <path> element
            const path = document.createElementNS(svgNamespace, "path");
            path.setAttribute("d", "M78.466,35.559L50.15,63.633L22.078,35.317c-0.777-0.785-2.044-0.789-2.828-0.012s-0.789,2.044-0.012,2.827L48.432,67.58 c0.365,0.368,0.835,0.563,1.312,0.589c0.139,0.008,0.278-0.001,0.415-0.021c0.054,0.008,0.106,0.021,0.16,0.022 c0.544,0.029,1.099-0.162,1.515-0.576l29.447-29.196c0.785-0.777,0.79-2.043,0.012-2.828S79.249,34.781,78.466,35.559z");

            // Append the <path> to the <g>
            g.appendChild(path);

            // Append the <g> to the SVG
            svg.appendChild(g);

            // Create the dropdown content container
            const dropdownContent = document.createElement('div');
            dropdownContent.className = 'dropdown-content';

            // Append the button and content to the container
            dropdownContainer.appendChild(dropdownBtn);
            dropdownBtn.appendChild(svg);
            dropdownContainer.appendChild(dropdownContent);

            if (
                params.jsonData &&
                params.selectedCollection in params.jsonData &&
                params.selectedModel in params.jsonData[params.selectedCollection].Models
            ) {
                const selectedModelStrap = params.jsonData[params.selectedCollection].Models[params.selectedModel];
                const strapCollection = selectedModelStrap['StrapCollection'];

                if (strapCollection) {
                    // Fetch the collection data
                    fetch(`/collections/${strapCollection}/products.json`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('API Response:', data); // Add this line to inspect the API response
                            const products = data.products;

                            products.forEach(product => {
                                const productTitle = product.title;
                                const variants = product.variants;
                                const handle = product.handle;
                                
                                const strapImage = product.metafields?.custom?.strap_customize_image;

                                if (variants.length > 0) {
                                    const variant = variants[0]; // Assuming you want the first variant
                                    const variantId = variant.id;
                                    const variantPrice = variant.price;

                                    const colOption = document.createElement('div');
                                    colOption.className = 'dropdown-item';
                                    colOption.setAttribute('value', variantId);
                                    colOption.textContent = `${productTitle} (${variantPrice})`;
                                    colOption.setAttribute('data-handle', handle);
                                    
                                    if (strapImage) {
                                        colOption.setAttribute('data-strap-img', strapImage);
                                    } else {
                                        console.log("strapImage not found for product:", productTitle);
                                    }

                                    dropdownContent.appendChild(colOption);
                                }
                            });
                        })
                        .catch(error => console.error('Error fetching collection data:', error));
                } else {
                    console.error('StrapCollection is not defined for the selected model.');
                }
            } else {
                console.error('The selected collection, model, or strap collection property does not exist.');
            }

            document.querySelectorAll('.strapengine__strap')[0].appendChild(wrapInDiv(dropdownContainer));

            console.log('Adding event listeners to dropdown items');
            dropdownContainer.addEventListener('click', function(event) {
                // Check if the clicked element has the 'dropdown-item' class
                if (event.target.classList.contains('dropdown-item')) {
                    const p_variant_id = event.target.getAttribute('value');
                    const p_Handle = event.target.getAttribute('data-handle');
                    const p_Name = event.target.textContent;
                    dropdownBtn.querySelector('span').innerHTML = p_Name;
                    console.log(p_Handle, "p_Handle===========");
                    getProductImg(p_Handle);
                    document.querySelector(".strap-add-to-cart input[name='id']").setAttribute('value', p_variant_id);
                    document.querySelector(".strap-add-to-cart .product-form__submit").removeAttribute('disabled');
                    // Find the closest dropdown container
            
                    if (dropdownContainer) {
                        // Find and hide the dropdown content
                        const dropdownContent = dropdownContainer.querySelector('.dropdown-content');
                        if (dropdownContent) {
                            dropdownContent.classList.remove('show');
                        } else {
                            console.warn('No dropdown content found within the dropdown container.');
                        }
                    } else {
                        console.warn('No dropdown container found for the clicked item.');
                    }
                }
            });

            // Initialize all dropdowns
            buildDropdownStrap();
        }


        const wrapInDiv = (obj) => {
            const div = document.createElement('div');
            div.appendChild(obj);
            return div;
        }

        const groupByIdentifier = (data) => {
            return data.reduce((result, item) => {
                const id = item['Identifier'];
                const discontinuedCollection = item['Discontinued collection'] || 'False';
                const collection = item['Collection name'];
                const modelName = item['Model name'];
                const discontinuedModel = item ['Discontinued model'];

                // Initialize the identifier entry if it doesn't exist
                if (!result[id]) {
                    result[id] = { Identifier: id, Collection: collection, dicontinued: discontinuedCollection ,Models: {} };
                }
        
                // Initialize the model entry if it doesn't exist
                if (modelName && !result[id].Models[modelName]) {
                    result[id].Models[modelName] = {
                        'Model Name': modelName,
                        'Discontinued' : discontinuedModel || 'False',
                        'Image': item['Image'] || '',
                        'Lugs Width': item['Lugs width'] || '',  
                        'Model Size': item['Model size'] || '',
                        'StrapCollection': item['Strap collection'] || ''
                    };
                }

                return result;
            }, {});
        }

        /**
         * Convert CSV to JSON
         * @param {string} csv - CSV data as a string
         * @returns {Object[]} - Array of JSON objects
         */
        const csvToJson = (csv) => {
            const lines = csv.split('\n');
            const headers = lines[0].split(',');

            return lines.slice(1).map(line => {
                const values = line.split(',');
                return headers.reduce((obj, header, i) => {
                    obj[header.trim()] = values[i].trim();
                    return obj;
                }, {});
            });
        }


        return {
            int:int
        }


    })();

    strapEngine.int();

    // CUSTOM DROPDOWN OPEN/CLOSE JS START

    function buildDropdownCollection() {
        const dropdownButtonCollection = document.querySelector('.select-collection .dropdown-btn');
        const dropdownContentCollection = document.querySelector('.select-collection .dropdown-content');

        if (!dropdownButtonCollection || !dropdownContentCollection) {
            console.warn('Collection dropdown elements not found.');
            return;
        }

        function toggleDropdownContent() {
            dropdownContentCollection.classList.toggle('show');
        }

        dropdownButtonCollection.addEventListener('click', toggleDropdownContent);

        document.querySelectorAll('.select-collection .dropdown-item').forEach(item => {
            item.addEventListener('click', function() {
                const span = dropdownButtonCollection.querySelector('span');
                const value = this.getAttribute('value');

                span.textContent = value;
                const imageModal = this.getAttribute('data-image');
                if (imageModal) {
                    const existingImg = span.querySelector('img');
                    if (existingImg) {
                        existingImg.src = imageModal;
                    } else {
                        const modelImgElement = document.createElement('img');
                        modelImgElement.src = imageModal;
                        modelImgElement.width = 35;
                        modelImgElement.height = 35;
                        span.appendChild(modelImgElement);
                    }
                } else {
                    span.querySelector('img')?.remove();
                }

                dropdownContentCollection.classList.remove('show');
            });
        });

        window.addEventListener('click', function(event) {
            if (!event.target.closest('.select-collection')) {
                dropdownContentCollection.classList.remove('show');
            }
        });
    }

    function buildDropdownModel() {
        const dropdownButtonModel = document.querySelector('.select-modal .dropdown-btn');
        const dropdownContentModel = document.querySelector('.select-modal .dropdown-content');

        if (!dropdownButtonModel || !dropdownContentModel) {
            console.warn('Model dropdown elements not found.');
            return;
        }

        function toggleDropdownContent() {
            dropdownContentModel.classList.toggle('show');
        }

        dropdownButtonModel.addEventListener('click', toggleDropdownContent);

        document.querySelectorAll('.select-modal .dropdown-item').forEach(item => {
            item.addEventListener('click', function() {
                const span = dropdownButtonModel.querySelector('span');
                const value = this.getAttribute('value');

                span.textContent = value;
                const imageModal = this.getAttribute('data-image');
                if (imageModal) {
                    const existingImg = span.querySelector('img');
                    if (existingImg) {
                        existingImg.src = imageModal;
                    } else {
                        const modelImgElement = document.createElement('img');
                        modelImgElement.src = imageModal;
                        modelImgElement.width = 35;
                        modelImgElement.height = 35;
                        span.appendChild(modelImgElement);
                    }
                } else {
                    span.querySelector('img')?.remove();
                }

                dropdownContentModel.classList.remove('show');
            });
        });

        window.addEventListener('click', function(event) {
            if (!event.target.closest('.select-modal')) {
                dropdownContentModel.classList.remove('show');
            }
        });
    }

    function buildDropdownStrap() {
        const dropdownButtonStrap = document.querySelector('.select-strap .dropdown-btn');
        const dropdownContentStrap = document.querySelector('.select-strap .dropdown-content');

        if (!dropdownButtonStrap || !dropdownContentStrap) {
            console.warn('Strap dropdown elements not found.');
            return;
        }

        function toggleDropdownContent() {
            dropdownContentStrap.classList.toggle('show');
        }

        dropdownButtonStrap.addEventListener('click', toggleDropdownContent);

        document.querySelectorAll('.select-strap .dropdown-item').forEach(item => {
            item.addEventListener('click', function() {
                const span = dropdownButtonStrap.querySelector('span');
                const value = this.getAttribute('value');

                span.textContent = value;
                const imageModal = this.getAttribute('data-image');
                if (imageModal) {
                    const existingImg = span.querySelector('img');
                    if (existingImg) {
                        existingImg.src = imageModal;
                    } else {
                        const modelImgElement = document.createElement('img');
                        modelImgElement.src = imageModal;
                        modelImgElement.width = 35;
                        modelImgElement.height = 35;
                        span.appendChild(modelImgElement);
                    }
                } else {
                    span.querySelector('img')?.remove();
                }

                dropdownContentStrap.classList.remove('show');
            });
        });

        window.addEventListener('click', function(event) {
            if (!event.target.closest('.select-strap')) {
                dropdownContentStrap.classList.remove('show');
            }
        });
    }

    function getProductImg(p_Handle) {
        const productUrl = `${location.origin}/products/${p_Handle}?view=product_img`;
        console.log("product_url == ", productUrl);
    
        // Use Fetch API to make the GET request
        fetch(productUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                // Create a temporary container to hold the fetched data
                const tempDiv = document.createElement('div');
                tempDiv.className = 'getProductImg-apiData hide';
                tempDiv.innerHTML = data;
    
                // Append the temporary container to the body
                document.body.appendChild(tempDiv);
     
                // Find the image source in the fetched data
                const imgElement = tempDiv.querySelector('.current_product_data img');
                if (imgElement) {
                    const currentProductStrapCustomizeImg = imgElement.getAttribute('src');
                    const strapImgElement = document.querySelector('.starp-img .strap__image img');
                    if (strapImgElement) {
                        strapImgElement.setAttribute('src', currentProductStrapCustomizeImg);
                        console.log(currentProductStrapCustomizeImg, "currentProductStrapCustomizeImg");
                        document.querySelector('.starp-img-inner').classList.add("add");
                    }  else {
                        console.log(strapImgElement, "imgElement is not found");
                    }
                }  else {
                    console.log(imgElement, "imgElement is not found");
                }
    
                // Remove the temporary container from the body
                document.body.removeChild(tempDiv);
            })
            .catch(error => {
                console.error("Error fetching product information:", error);
            });
    }  

    // CUSTOM DROPDOWN OPEN/CLOSE JS END

</script>

{% schema %}
{
    "name": "Starp Customization",
    "settings": [
      {
        "type": "image_picker",
        "id": "strap_img",
        "label": "Strap Image"
      },
      {
        "type": "text",
        "id": "heading",
        "label": "Heading",
        "default": "Customize Your Strap"
      },
      {
        "type": "textarea",
        "id": "desc",
        "label": "Description",
        "default": "Choose your favorite strap design and customize your look."
      },
      {
        "type": "text",
        "id": "watch_title",
        "label": "Watch Title",
        "default": "Watch Customization"
      },
      {
        "type": "text",
        "id": "watch_text",
        "label": "Watch Text"
      },
      {
        "type": "text",
        "id": "strap_title",
        "label": "Strap Title",
        "default": "Strap Options"
      },
      {
        "type": "text",
        "id": "strap_text",
        "label": "Strap Text"
      }
    ],
    "presets": [
      {
        "name": "Starp Customization",
        "category": "Customization"
      }
    ]
  }
{% endschema %}